<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.shop.mapper.AdminMapper">
	<!-- 상품 등록 -->
  	<insert id="bookEnroll">
  	
  	<selectKey resultType="int" keyProperty="bookId" order="BEFORE">
  		
  			SELECT MAX(bookId)+1 FROM book
  		
  		</selectKey>
  	
  		insert into book(bookName, authorId, publeYear, publisher, cateCode, bookPrice, bookStock, bookDiscount, bookIntro, bookContents)
		values(#{bookName},#{authorId}, #{publeYear},#{publisher},#{cateCode},#{bookPrice},#{bookStock},#{bookDiscount},#{bookIntro},#{bookContents})

  	</insert>
	<!-- 카테고리 리스트 -->
  	<select id="cateList" resultType="com.shop.vo.CateVO">
  	
  		select * from bcate order by catecode
  	
  	</select>
  	
  	<!-- 상품 리스트 -->
	<select id="goodsGetList" resultType="com.shop.vo.BookVO">
	
		select  bookId, bookName,  b.authorName, c.cateName, bookStock, a.regDate
		from book a 
		left outer join author b on a.authorId = b.authorId
		left outer join bcate c on a.cateCode = c.cateCode
		<if test="keyword != null">
			where (bookName like concat ('%', #{keyword}, '%'))
		</if>
		order by bookId desc 
		limit #{skip}, #{amount}		
	
	</select>
  	
  	<!-- 상품 총 갯수 -->
  	<select id="goodsGetTotal" resultType="int">
  	
  		select count(*) from book
  		
  		<if test="keyword != null">
  		
  			where bookName like concat('%' , #{keyword}, '%')
  		
  		</if>
  	
  	</select>
  	
  	<!-- 상품 조회 페이지 -->
	<select id="goodsGetDetail" resultType="com.shop.vo.BookVO">
	
		select bookId, bookName, (select authorName from author where authorId =book.authorId) authorName, 
			authorId, publeYear, publisher, cateCode, bookPrice, bookStock, bookDiscount, bookIntro, bookContents, regDate, updateDate 
		from book where bookId = #{bookId}
	
	</select>
	
	<!-- 상품 정보 수정 -->
	<update id="goodsModify">
		
		update book set bookName = #{bookName}, authorId = #{authorId}, publeYear = #{publeYear}, publisher = #{publisher}, cateCode = ${cateCode}, 
		bookPrice = #{bookPrice}, bookStock = #{bookStock}, bookDiscount = #{bookDiscount}, bookIntro = #{bookIntro}, bookContents = #{bookContents}, updateDate = now()
		where bookId = ${bookId}
		
	</update>
	
	<!-- 상품 정보 삭제 -->
	<delete id="goodsDelete">
	
		delete from book where bookId = #{bookId}
	
	</delete>
	
	<!-- 이미지 등록 -->
	<insert id="imageEnroll">
	
		insert into image(bookId, fileName, uploadPath, uuid) values (#{bookId}, #{fileName}, #{uploadPath}, #{uuid})
	
	</insert>

  </mapper>